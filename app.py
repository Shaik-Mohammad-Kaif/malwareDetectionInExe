import os
import uuid
import numpy as np
import pefile
from flask import Flask, request, jsonify, render_template, redirect, session, url_for
from pymongo import MongoClient
from werkzeug.utils import secure_filename
from werkzeug.security import generate_password_hash, check_password_hash
from tensorflow.keras.models import load_model
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Initialize Flask app
app = Flask(__name__)
app.secret_key = "secret_key"  # Needed for Flask sessions

# Path for file uploads
UPLOAD_FOLDER = 'uploads'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# MongoDB configuration
client = MongoClient('mongodb://localhost:27017/')
db = client['malware_detection_db']
users = db['users']
history = db['detection_history']  # Collection for storing file history

# Load the saved ML model
model = load_model('malware_detection_model.h5')

# Create the upload folder if it doesn't exist
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

# Email configuration
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
EMAIL_ADDRESS = "dheerajdonepudi18@gmail.com"  # Replace with your email address
EMAIL_PASSWORD = "onbc sbet ejnm vqik"  # Replace with your email password

def send_email(subject, body, to_email="deepthisai.3119@gmail.com"):
    try:
        # Create the email message
        msg = MIMEMultipart()
        msg['From'] = EMAIL_ADDRESS
        msg['To'] = to_email
        msg['Subject'] = subject

        # Determine detection result and corresponding indicator
        detection_result = body.split(':')[-1].strip().lower()
        if "malware" in detection_result:
            indicator = "✅"  # Red indicator for malware detected
            indicator_color = "#dc3545"  # Red color
        else:
            indicator = "✅"  # Green indicator for no malware
            indicator_color = "#28a745"  # Green color

        # Updated HTML template for the email
        html_content = f"""
        <html>
        <head>
            <style>
                body {{
                    font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
                    margin: 0;
                    padding: 0;
                    background-color: #f8f9fa;
                    color: #212529;
                }}
                .email-container {{
                    max-width: 650px;
                    margin: 30px auto;
                    background-color: #ffffff;
                    border-radius: 8px;
                    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
                    overflow: hidden;
                }}
                .header {{
                    background-color: #007bff;
                    color: #ffffff;
                    text-align: center;
                    padding: 20px;
                }}
                .header h1 {{
                    margin: 0;
                    font-size: 24px;
                }}
                .content {{
                    padding: 20px;
                }}
                .content h3 {{
                    margin: 0 0 10px 0;
                    color: #495057;
                }}
                .content p {{
                    margin: 10px 0;
                    font-size: 18px;
                    line-height: 1.7;
                    color: #6c757d;
                }}
                .indicator {{
                    font-size: 24px;
                    color: {indicator_color};
                }}
                .footer {{
                    text-align: center;
                    padding: 10px;
                    font-size: 16px;
                    color: #adb5bd;
                    background-color: #f1f3f5;
                }}
                .button {{
                    display: inline-block;
                    padding: 10px 20px;
                    margin: 20px 0;
                    color: #ffffff;
                    background-color: #28a745;
                    text-decoration: none;
                    border-radius: 4px;
                    font-weight: bold;
                }}
                .button:hover {{
                    background-color: #218838;
                }}
            </style>
        </head>
        <body>
            <div class="email-container">
                <div class="header">
                    <h1>Malware Detection Service</h1>
                </div>
                <div class="content">
                    <h3>Analysis Report</h3>
                    <p><strong>Filename:</strong> {subject.split(' ')[-1]}</p>
                    <p><strong>Detection Result:</strong> <span class="indicator">{indicator}</span> {body.split(':')[-1].strip()}</p>
                    <p>Thank you for using our service. For more information or assistance, please contact our support team.</p>
                </div>
                <div class="footer">
                    <p>&copy; 2024 Malware Detection Team. All rights reserved.</p>
                </div>
            </div>
        </body>
        </html>
        """

        msg.attach(MIMEText(html_content, 'html'))

        # Connect to the SMTP server and send the email
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
            server.send_message(msg)

        print("Email sent successfully.")
    except Exception as e:
        print(f"Failed to send email: {e}")


# Function to extract features from the .exe file
def extract_features_from_exe(file_path):
    try:
        pe = pefile.PE(file_path)

        features = [
            len(pe.sections),
            pe.OPTIONAL_HEADER.SizeOfCode,
            pe.OPTIONAL_HEADER.SizeOfImage,
            pe.OPTIONAL_HEADER.SizeOfHeaders,
            pe.FILE_HEADER.Machine,
            pe.FILE_HEADER.NumberOfSections,
            pe.OPTIONAL_HEADER.AddressOfEntryPoint,
            pe.OPTIONAL_HEADER.MajorLinkerVersion,
            pe.OPTIONAL_HEADER.MinorLinkerVersion,
            pe.FILE_HEADER.Characteristics,
            pe.OPTIONAL_HEADER.BaseOfCode,
            pe.OPTIONAL_HEADER.BaseOfData,
            len(pe.DIRECTORY_ENTRY_IMPORT),
            pe.OPTIONAL_HEADER.DllCharacteristics,
        ]

        # Close the PE file explicitly
        pe.close()

        # Ensure the number of features is exactly 33 by padding or truncating
        if len(features) < 33:
            features.extend([0] * (33 - len(features)))
        elif len(features) > 33:
            features = features[:33]

        return np.array(features).reshape(1, -1)

    except Exception as e:
        print(f"Error processing {file_path}: {e}")
        return None

# Function to predict if the .exe file is malware or benign
def predict_malware(file_path):
    features = extract_features_from_exe(file_path)
    if features is not None:
        prediction = model.predict(features)
        print("Prediction:", prediction)  # Debugging
        return 'Malware Detected' if prediction > 0.5 else 'No Malware Detected'
    else:
        return 'Error: Could not extract features from the file'

# Route for home page
@app.route('/')
def home():
    if 'username' in session:
        return render_template('index.html', username=session['username'])
    return redirect(url_for('login_page'))

# Route for signup page
@app.route('/signup', methods=['GET', 'POST'])
def signup_page():
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']
        confirm_password = request.form['confirm_password']

        # Validate form data
        if password != confirm_password:
            return "Passwords do not match!"

        if users.find_one({'email': email}):
            return "Email already exists!"

        # Store user details with hashed password
        hashed_password = generate_password_hash(password)
        users.insert_one({
            'username': username,
            'email': email,
            'password': hashed_password
        })

        return redirect(url_for('login_page'))

    return render_template('signup.html')

# Route for login page
@app.route('/login', methods=['GET', 'POST'])
def login_page():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']

        user = users.find_one({'email': email})
        if user and check_password_hash(user['password'], password):
            session['username'] = user['username']
            return redirect(url_for('home'))

        return "Invalid email or password"

    return render_template('login.html')

# Route to handle file upload and prediction
@app.route('/predict', methods=['POST'])
def predict():
    if 'username' not in session:
        return redirect(url_for('login_page'))

    if 'file' not in request.files:
        return jsonify({'error': 'No file uploaded'})

    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No selected file'})

    if file:
        # Generate a unique filename to prevent conflicts
        unique_filename = f"{uuid.uuid4()}_{secure_filename(file.filename)}"
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)

        try:
            # Save the uploaded file
            file.save(file_path)

            # Make prediction
            result = predict_malware(file_path)

            # Save the result to MongoDB
            history.insert_one({
                'username': session['username'],
                'filename': file.filename,
                'result': result
            })

            # Send an email with the prediction result
            subject = f"Malware Detection Result for {file.filename}"
            body = f"The uploaded file '{file.filename}' was analyzed. Detection result: {result}."
            send_email(subject, body)

        except Exception as e:
            print(f"Error during file processing: {e}")
            result = "Error: Could not process the file"

        finally:
            # Clean up the uploaded file
            if os.path.exists(file_path):
                os.remove(file_path)

        return jsonify({'filename': file.filename, 'result': result})

# Route for dashboard
@app.route('/dashboard')
def dashboard():
    if 'username' not in session:
        return redirect(url_for('login_page'))
    
    # Fetch the user's history from the MongoDB collection
    user_history = list(history.find({'username': session['username']}))
    
    # Debugging: Print the fetched data
    print("Fetched History:", user_history)

    # Pass the data to the template
    return render_template('dashboard.html', history=user_history)

# Route for logout
@app.route('/logout')
def logout():
    session.pop('username', None)
    return redirect(url_for('login_page'))

# Start the Flask app
if __name__ == '__main__':
    app.run(debug=True)
